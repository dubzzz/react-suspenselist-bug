{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["A1","createAsyncText","B1","C1","A2","B2","C2","CompoWithSuspense","req","map","e","SuspenseList","revealOrder","name","Compo","Suspense","fallback","Text","text","ScenarioA","React","useState","version","setVersion","setC","withRerender","f","c","disabled","isResolved","onClick","resolve","ScenarioB","App","style","display","flexGrow","textAlign","margin","href","props","resolved","Component","promise","Promise","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d491b4ba.chunk.js","sourcesContent":["import React from \"react\";\n\nconst A1 = createAsyncText(\"A\");\nconst B1 = createAsyncText(\"B\");\nconst C1 = createAsyncText(\"C\");\n\nconst A2 = createAsyncText(\"A\");\nconst B2 = createAsyncText(\"B\");\nconst C2 = createAsyncText(\"C\");\n\nfunction CompoWithSuspense({ req }) {\n  return (\n    <div>\n      <div>Request: {req.map(e => e[0])}</div>\n      <ul>\n        <React.SuspenseList revealOrder=\"forwards\">\n          {req.map(e => {\n            const [name, Compo] = e;\n            return (\n              <React.Suspense fallback={<Text text={`Loading ${name}`} />}>\n                <Compo />\n              </React.Suspense>\n            );\n          })}\n        </React.SuspenseList>\n      </ul>\n    </div>\n  );\n}\n\nfunction ScenarioA() {\n  const [version, setVersion] = React.useState(1);\n\n  const [, setC] = React.useState(0);\n  const withRerender = f => () => {\n    f();\n    setC(c => c + 1);\n  };\n\n  return (\n    <div>\n      <div>\n        Scenario is:\n        <ul>\n          <li>\n            Click on <em>Resolve A</em>\n          </li>\n          <li>\n            Click on <em>Resolve C</em>\n          </li>\n          <li>\n            Click on <em>See second page</em>\n          </li>\n        </ul>\n        <p>Got: A / A / Loading B / Loading C</p>\n        <p>\n          C has been marked as loading while it has already been rendered as a\n          loaded once.\n        </p>\n      </div>\n      <div>\n        <button disabled={A1.isResolved()} onClick={withRerender(A1.resolve)}>\n          Resolve A\n        </button>\n        <button disabled={B1.isResolved()} onClick={withRerender(B1.resolve)}>\n          Resolve B\n        </button>\n        <button disabled={C1.isResolved()} onClick={withRerender(C1.resolve)}>\n          Resolve C\n        </button>\n        <button disabled={version === 2} onClick={() => setVersion(2)}>\n          See second page\n        </button>\n      </div>\n      <br />\n      <div>\n        <CompoWithSuspense\n          req={\n            version === 1\n              ? [[\"C\", C1]]\n              : [\n                  [\"A\", A1],\n                  [\"A\", A1],\n                  [\"B\", B1],\n                  [\"C\", C1]\n                ]\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction ScenarioB() {\n  const [version, setVersion] = React.useState(1);\n\n  const [, setC] = React.useState(0);\n  const withRerender = f => () => {\n    f();\n    setC(c => c + 1);\n  };\n\n  return (\n    <div>\n      <div>\n        Scenario is:\n        <ul>\n          <li>\n            Click on <em>Resolve B</em>\n          </li>\n          <li>\n            Click on <em>Resolve C</em>\n          </li>\n          <li>\n            Click on <em>See second page</em>\n          </li>\n        </ul>\n        <p>Got: Loading A / C / Loading C</p>\n        <p>Not consistent with the other scenario.</p>\n      </div>\n      <div>\n        <button disabled={A2.isResolved()} onClick={withRerender(A2.resolve)}>\n          Resolve A\n        </button>\n        <button disabled={B2.isResolved()} onClick={withRerender(B2.resolve)}>\n          Resolve B\n        </button>\n        <button disabled={C2.isResolved()} onClick={withRerender(C2.resolve)}>\n          Resolve C\n        </button>\n        <button disabled={version === 2} onClick={() => setVersion(2)}>\n          See second page\n        </button>\n      </div>\n      <br />\n      <div>\n        <CompoWithSuspense\n          req={\n            version === 1\n              ? [\n                  [\"B\", B2],\n                  [\"C\", C2]\n                ]\n              : [\n                  [\"A\", A2],\n                  [\"C\", C2],\n                  [\"C\", C2]\n                ]\n          }\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flexGrow: 1 }}>\n          <ScenarioA />\n        </div>\n        <div style={{ flexGrow: 1 }}>\n          <ScenarioB />\n        </div>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Source is available at{\" \"}\n        <a href=\"https://github.com/dubzzz/react-suspenselist-bug/\">\n          https://github.com/dubzzz/react-suspenselist-bug/\n        </a>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Inconsistency discovered thanks to{\" \"}\n        <a href=\"https://github.com/dubzzz/fast-check/\">\n          <b>fast-check</b>\n        </a>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\nfunction Text(props) {\n  return <li>{props.text}</li>;\n}\n\nfunction createAsyncText(text) {\n  let resolved = false;\n  let Component = function() {\n    if (!resolved) {\n      throw promise;\n    }\n    return <Text text={text} />;\n  };\n  let promise = new Promise(resolve => {\n    Component.resolve = function() {\n      resolved = true;\n      return resolve();\n    };\n    Component.isResolved = () => resolved;\n  });\n  return Component;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}