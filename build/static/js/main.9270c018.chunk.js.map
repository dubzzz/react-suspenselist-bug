{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["A","createAsyncText","B","C","CompoWithSuspense","version","style","border","margin","padding","key","revealOrder","fallback","Text","text","ScenarioC","React","useState","setVersion","setC","withRerender","f","c","disabled","isResolved","onClick","resolve","App","display","flexGrow","textAlign","href","props","resolved","Component","promise","Promise","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9270c018.chunk.js","sourcesContent":["import React, { Suspense, SuspenseList } from \"react\";\n\nconst A = createAsyncText(\"A\");\nconst B = createAsyncText(\"B\");\nconst C = createAsyncText(\"C\");\n\nfunction CompoWithSuspense({ version }) {\n  return (\n    <div>\n      <div\n        style={{ border: \"dotted 1px black\", margin: \"1em\", padding: \"1em\" }}\n      >\n        <div>Rendering page number: {version}</div>\n        <div>\n          Rendering using <code>SuspenseList</code>:\n        </div>\n        <ul>\n          {version === 1 ? (\n            <SuspenseList key=\"1\" revealOrder=\"forwards\">\n              <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n                <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n                  <C />\n                </Suspense>\n              </SuspenseList>\n            </SuspenseList>\n          ) : (\n            <SuspenseList key=\"1\" revealOrder=\"forwards\">\n              <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n                <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n                  <A />\n                </Suspense>\n                <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n                  <B />\n                </Suspense>\n                <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n                  <C />\n                </Suspense>\n              </SuspenseList>\n            </SuspenseList>\n          )}\n        </ul>\n      </div>\n      <div>\n        Rendering outside of <code>SuspenseList</code> with simple{\" \"}\n        <code>Suspense</code>:\n      </div>\n      <div>\n        Help to visually check which <code>Components</code> are already\n        resolved\n      </div>\n      <ul>\n        <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n          <A />\n        </Suspense>\n        <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n          <B />\n        </Suspense>\n        <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n          <C />\n        </Suspense>\n      </ul>\n    </div>\n  );\n}\n\nfunction ScenarioC() {\n  const [version, setVersion] = React.useState(1);\n\n  const [, setC] = React.useState(0);\n  const withRerender = f => () => {\n    f();\n    setC(c => c + 1);\n  };\n\n  // Counterexample: [\n  //  {\"key\":\"fd\",\"item\":[\n  //    {\"key\":\"08\",\"item\":[\n  //      {\"key\":\"81\",\"item\":{\"value\":\"3\",\"renderPhase\":\"b only\"}},  // we called it A\n  //      {\"key\":\"dd\",\"item\":{\"value\":\"c\",\"renderPhase\":\"b only\"}},  // we called it B\n  //      {\"key\":\"53\",\"item\":{\"value\":\"0\",\"renderPhase\":\"both\"}}     // we called it C\n  //    ]}\n  //  ]},Scheduler`\n  // -> [task#1] promise resolved with value \"0\"\n  // -> [task#4] sequence:: resolved\n  // -> [task#2] promise resolved with value \"3\"\n  // -> [task#3] promise pending`]\n  //\n  // Shrunk 0 time(s)\n  // Got error: Error: expect(received).toEqual(expected) // deep equality\n  //\n  // - Expected\n  // + Received\n  //\n  // @@ -1,8 +1,8 @@\n  //   <React.Fragment>\n  //     <span>\n  // -     3\n  // +     Loading 3\n  //     </span>\n  //     <span>\n  //       Loading c\n  //     </span>\n  //     <span>\n\n  return (\n    <div>\n      <div>\n        Scenario is:\n        <ul>\n          <li>\n            Click on <em>Resolve C</em>\n          </li>\n          <li>\n            Click on <em>See second page</em>\n          </li>\n          <li>\n            Click on <em>Resolve A</em>\n          </li>\n        </ul>\n        <p>Got: Loading A / Loading B / C</p>\n        <p>Expected: A / Loading B / C</p>\n      </div>\n      <div>\n        <button disabled={A.isResolved()} onClick={withRerender(A.resolve)}>\n          Resolve A\n        </button>\n        <button disabled={B.isResolved()} onClick={withRerender(B.resolve)}>\n          Resolve B\n        </button>\n        <button disabled={C.isResolved()} onClick={withRerender(C.resolve)}>\n          Resolve C\n        </button>\n        <button disabled={version === 2} onClick={() => setVersion(2)}>\n          See second page\n        </button>\n      </div>\n      <br />\n      <div>\n        <CompoWithSuspense version={version} />\n      </div>\n    </div>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flexGrow: 1 }}>\n          <ScenarioC />\n        </div>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Source is available at{\" \"}\n        <a href=\"https://github.com/dubzzz/react-suspenselist-bug/\">\n          https://github.com/dubzzz/react-suspenselist-bug/\n        </a>\n        <br />\n        <a href=\"https://github.com/facebook/react/issues/17515#issuecomment-561418297\">\n          Version 2\n        </a>\n        , previous version of the page available{\" \"}\n        <a href=\"https://dubzzz.github.io/react-suspenselist-bug/build-v1/\">\n          here\n        </a>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Inconsistency discovered thanks to{\" \"}\n        <a href=\"https://github.com/dubzzz/fast-check/\">\n          <b>fast-check</b>\n        </a>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\nfunction Text(props) {\n  return <li>{props.text}</li>;\n}\n\nfunction createAsyncText(text) {\n  let resolved = false;\n  let Component = function() {\n    if (!resolved) {\n      throw promise;\n    }\n    return <Text text={text} />;\n  };\n  let promise = new Promise(resolve => {\n    Component.resolve = function() {\n      resolved = true;\n      return resolve();\n    };\n    Component.isResolved = () => resolved;\n  });\n  return Component;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}