{"version":3,"sources":["A.js","B.js","App.js","serviceWorker.js","index.js"],"names":["A","B","C","React","lazy","a","Promise","resolve","setTimeout","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","useState","secondPage","setSecondPage","className","onClick","disabled","key","revealOrder","fallback","style","marginTop","href","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gNACe,SAASA,IACtB,OAAO,kCCDM,SAASC,IACtB,OAAO,kCCGT,IACMC,EAAIC,IAAMC,KAAN,sBAAW,sBAAAC,EAAA,sEADK,IAAIC,SAAQ,SAACC,GAAD,OAAaC,WAAWD,EAAS,QAClD,gCAEZ,8BAFY,4CCMDE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,WAAWC,SAASC,eAAe,SAASC,OAAO,mBFM7C,WAAgB,IAAD,EACQC,oBAAS,GADjB,mBACrBC,EADqB,KACTC,EADS,KAE5B,OACE,yBAAKC,UAAU,OACb,4BAAQC,QAAS,kBAAMF,GAAc,IAAOG,SAAUJ,GAAtD,UAGA,2BACE,sCAEAA,EASA,kBAAC,eAAD,CAAcK,IAAI,IAAIC,YAAY,YAChC,kBAAC,eAAD,CAAcD,IAAI,MAAMC,YAAY,YAClC,kBAAC,WAAD,CAAUD,IAAI,QAAQE,SAAU,2CAC9B,kBAAC3B,EAAD,OAEF,kBAAC,WAAD,CAAUyB,IAAI,QAAQE,SAAU,2CAC9B,kBAAC1B,EAAD,OAEF,kBAAC,WAAD,CAAUwB,IAAI,QAAQE,SAAU,2CAC9B,kBAACzB,EAAD,SAjBN,kBAAC,eAAD,CAAcuB,IAAI,IAAIC,YAAY,YAChC,kBAAC,eAAD,CAAcD,IAAI,MAAMC,YAAY,YAClC,kBAAC,WAAD,CAAUD,IAAI,QAAQE,SAAU,2CAC9B,kBAAC3B,EAAD,SAmBR,2BACE,0CAEAoB,EAOA,kBAAC,eAAD,CAAcK,IAAI,MAAMC,YAAY,YAClC,kBAAC,WAAD,CAAUD,IAAI,QAAQE,SAAU,2CAC9B,kBAAC3B,EAAD,OAEF,kBAAC,WAAD,CAAUyB,IAAI,QAAQE,SAAU,2CAC9B,kBAAC1B,EAAD,OAEF,kBAAC,WAAD,CAAUwB,IAAI,QAAQE,SAAU,2CAC9B,kBAACzB,EAAD,QAdJ,kBAAC,eAAD,CAAcuB,IAAI,MAAMC,YAAY,YAClC,kBAAC,WAAD,CAAUD,IAAI,QAAQE,SAAU,2CAC9B,kBAAC3B,EAAD,QAgBN,yBAAK4B,MAAO,CAAEC,UAAW,QAAzB,yBACyB,IACvB,uBAAGC,KAAK,qDAAR,sDAIF,0DAC6B,IAC3B,uBAAGA,KAAK,yCACN,0CACG,IAJP,IAKI,IACF,iCACM,IACJ,uBAAGA,KAAK,mFAAR,uBE3EkD,OD4HtD,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1f7d2bb4.chunk.js","sourcesContent":["import React from \"react\";\nexport default function A() {\n  return <div>A</div>;\n}\n","import React from \"react\";\nexport default function B() {\n  return <div>B</div>;\n}\n","import React, { Suspense, SuspenseList, useState } from \"react\";\n\nimport A from \"./A\";\nimport B from \"./B\";\n\nconst longLoading = () => new Promise((resolve) => setTimeout(resolve, 10000));\nconst C = React.lazy(async () => {\n  await longLoading();\n  return import(\"./C\");\n});\n\nexport default function App() {\n  const [secondPage, setSecondPage] = useState(false);\n  return (\n    <div className=\"App\">\n      <button onClick={() => setSecondPage(true)} disabled={secondPage}>\n        Update\n      </button>\n      <p>\n        <b>Nested</b>\n      </p>\n      {!secondPage ? (\n        <SuspenseList key=\"1\" revealOrder=\"forwards\">\n          <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n            <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\n              <A />\n            </Suspense>\n          </SuspenseList>\n        </SuspenseList>\n      ) : (\n        <SuspenseList key=\"1\" revealOrder=\"forwards\">\n          <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n            <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\n              <A />\n            </Suspense>\n            <Suspense key=\"1.1.b\" fallback={<div>Loading B</div>}>\n              <B />\n            </Suspense>\n            <Suspense key=\"1.1.c\" fallback={<div>Loading C</div>}>\n              <C />\n            </Suspense>\n          </SuspenseList>\n        </SuspenseList>\n      )}\n      <p>\n        <b>Not Nested</b>\n      </p>\n      {!secondPage ? (\n        <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n          <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\n            <A />\n          </Suspense>\n        </SuspenseList>\n      ) : (\n        <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n          <Suspense key=\"1.1.a\" fallback={<div>Loading A</div>}>\n            <A />\n          </Suspense>\n          <Suspense key=\"1.1.b\" fallback={<div>Loading B</div>}>\n            <B />\n          </Suspense>\n          <Suspense key=\"1.1.c\" fallback={<div>Loading C</div>}>\n            <C />\n          </Suspense>\n        </SuspenseList>\n      )}\n      <div style={{ marginTop: \"2em\" }}>\n        Source is available at{\" \"}\n        <a href=\"https://github.com/dubzzz/react-suspenselist-bug/\">\n          https://github.com/dubzzz/react-suspenselist-bug/\n        </a>\n      </div>\n      <div>\n        Issue discovered thanks to{\" \"}\n        <a href=\"https://github.com/dubzzz/fast-check/\">\n          <b>fast-check</b>\n        </a>{\" \"}\n        -{\" \"}\n        <i>\n          see{\" \"}\n          <a href=\"https://github.com/dubzzz/react/commit/e2cb4776ea3634fab2021d83cb8259bde03c0f3a\">\n            dubzzz@e2cb477\n          </a>\n        </i>\n      </div>\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}