{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["A","createText","B","C","text","resolved","Component","promise","Text","Promise","resolve","isResolved","createAsyncText","NoNestedSuspenseList","version","key","revealOrder","fallback","CodeBlock","NestedSuspenseList","PageContent","f","React","useState","setVersion","setC","disabled","onClick","c","style","display","flexGrow","App","textAlign","margin","href","props","rows","width","value","children","readOnly","Boolean","window","location","hostname","match","ReactDOM","createRoot","document","getElementById","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0a0bdfde.chunk.js","sourcesContent":["import React, { Suspense, SuspenseList } from \"react\";\n\nconst A = createText(\"A\");\nconst B = createText(\"B\");\nconst C = createAsyncText(\"C\");\n\nfunction NoNestedSuspenseList({ version }) {\n  if (version === 1) {\n    return (\n      <>\n        <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n          <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n            <A />\n          </Suspense>\n        </SuspenseList>\n        <CodeBlock>{`<SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n  <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n    <A />\n  </Suspense>\n</SuspenseList>`}</CodeBlock>\n      </>\n    );\n  }\n  return (\n    <>\n      <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n        <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n          <A />\n        </Suspense>\n        <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n          <B />\n        </Suspense>\n        <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n          <C />\n        </Suspense>\n      </SuspenseList>\n      <CodeBlock>{`<SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n  <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n    <A />\n  </Suspense>\n  <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n    <B />\n  </Suspense>\n  <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n    <C />\n  </Suspense>\n</SuspenseList>`}</CodeBlock>\n    </>\n  );\n}\n\nfunction NestedSuspenseList({ version }) {\n  if (version === 1) {\n    return (\n      <>\n        <SuspenseList key=\"1\" revealOrder=\"forwards\">\n          <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n            <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n              <A />\n            </Suspense>\n          </SuspenseList>\n        </SuspenseList>\n        <CodeBlock>{`<SuspenseList key=\"1\" revealOrder=\"forwards\">\n  <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n    <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n      <A />\n    </Suspense>\n  </SuspenseList>\n</SuspenseList>`}</CodeBlock>\n      </>\n    );\n  }\n  return (\n    <>\n      <SuspenseList key=\"1\" revealOrder=\"forwards\">\n        <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n          <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n            <A />\n          </Suspense>\n          <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n            <B />\n          </Suspense>\n          <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n            <C />\n          </Suspense>\n        </SuspenseList>\n      </SuspenseList>\n      <CodeBlock>{`<SuspenseList key=\"1\" revealOrder=\"forwards\">\n  <SuspenseList key=\"1.1\" revealOrder=\"forwards\">\n    <Suspense key=\"1.1.a\" fallback={<Text text=\"Loading A\" />}>\n      <A />\n    </Suspense>\n    <Suspense key=\"1.1.b\" fallback={<Text text=\"Loading B\" />}>\n      <B />\n    </Suspense>\n    <Suspense key=\"1.1.c\" fallback={<Text text=\"Loading C\" />}>\n      <C />\n    </Suspense>\n  </SuspenseList>\n</SuspenseList>`}</CodeBlock>\n    </>\n  );\n}\n\nfunction PageContent() {\n  const [version, setVersion] = React.useState(1);\n\n  const [, setC] = React.useState(0);\n  const withRerender = (f) => () => {\n    f();\n    setC((c) => c + 1);\n  };\n\n  return (\n    <>\n      <h1>\n        Inconsistencies between nested SuspenseList and single SuspenseList\n      </h1>\n      <p>\n        In the following example both <code>&lt;A /&gt;</code> and{\" \"}\n        <code>&lt;B /&gt;</code> are not lazy loaded components.\n      </p>\n      <p>\n        On the contrary <code>&lt;C /&gt;</code> is alazy loaded component.\n      </p>\n      <p>\n        In order to simulate its load you can click on the button \"Resolve C\".\n      </p>\n      <h2>Steps to reproduce:</h2>\n      <ul>\n        <li>\n          Click on <em>See second page</em>\n        </li>\n      </ul>\n      <p>Nested: A / Loading B / Loading C</p>\n      <p>Not Nested: A / B / Loading C</p>\n      <h2>Actions:</h2>\n      <div>\n        <button disabled={C.isResolved()} onClick={withRerender(C.resolve)}>\n          Resolve C\n        </button>\n        <button disabled={version === 2} onClick={() => setVersion(2)}>\n          See second page\n        </button>\n      </div>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flexGrow: 1 }}>\n          <h2>Nested SuspenseList</h2>\n          <NestedSuspenseList version={version} />\n        </div>\n        <div style={{ flexGrow: 1 }}>\n          <h2>Non nested SuspenseList</h2>\n          <NoNestedSuspenseList version={version} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nfunction App() {\n  return (\n    <>\n      <div style={{ display: \"flex\" }}>\n        <div style={{ flexGrow: 1 }}>\n          <PageContent />\n        </div>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Source is available at{\" \"}\n        <a href=\"https://github.com/dubzzz/react-suspenselist-bug/\">\n          https://github.com/dubzzz/react-suspenselist-bug/\n        </a>\n        <br />\n        Version 3, previous version of the page available{\" \"}\n        <a href=\"https://dubzzz.github.io/react-suspenselist-bug/build-v2/\">\n          here\n        </a>\n      </div>\n      <div style={{ textAlign: \"center\", margin: \"2em\" }}>\n        Inconsistency discovered thanks to{\" \"}\n        <a href=\"https://github.com/dubzzz/fast-check/\">\n          <b>fast-check</b>\n        </a>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n\nfunction CodeBlock(props) {\n  return (\n    <textarea\n      rows={12}\n      style={{ width: \"100%\" }}\n      value={props.children}\n      readOnly={true}\n    />\n  );\n}\n\nfunction Text(props) {\n  return <p>{props.text}</p>;\n}\n\nfunction createText(text) {\n  return function () {\n    return <Text text={text} />;\n  };\n}\n\nfunction createAsyncText(text) {\n  let resolved = false;\n  let Component = function () {\n    if (!resolved) {\n      throw promise;\n    }\n    return <Text text={text} />;\n  };\n  let promise = new Promise((resolve) => {\n    Component.resolve = function () {\n      resolved = true;\n      return resolve();\n    };\n    Component.isResolved = () => resolved;\n  });\n  return Component;\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.createRoot(document.getElementById(\"root\")).render(<App />);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}